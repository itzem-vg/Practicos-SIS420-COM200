# -*- coding: utf-8 -*-
"""Practico_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KMkCf35qxFeo-9t2Py8Rgp-sSQEEYXEL
"""

import numpy as np
import pandas as pd

# Generador de  estaturas
#np.random.seed(55)  # Fijar una semilla
ValEstaturas = np.random.uniform(1.4, 2.2, 100)  #(min,max, cantidad)
ValPesos = []  #Almacen de pesos

# Generador controlado de pesos
for estatura in ValEstaturas:
    # Calcular  peso mínimo y máximo, IMC saludable (18.5 a 24.9)
    peso_min = 18.5 * (estatura ** 2)
    peso_max = 24.9 * (estatura ** 2)

    # Generar un peso aleatorio entre el peso mínimo y máximo calculado
    peso = np.random.uniform(peso_min, peso_max)
    ValPesos.append(peso)  # Añadir el peso a la lista de pesos

# Crear un DataFrame con los datos de estatura y peso
data = pd.DataFrame({
    'Estatura (m)': ValEstaturas,
    'Peso (kg)': ValPesos
})

data
#Var independiente sera estatura
#Var dependiente peso

import matplotlib.pyplot as mplt

# Ver datos generados de PUNTOS
mplt.xlabel('Estatura (m)')  # Eje X
mplt.ylabel('Peso (kg)')  # Eje Y PREDECIR

mplt.scatter(data['Estatura (m)'], data['Peso (kg)'], color='pink')
mplt.title('Comparacion Peso vs Estatura')


mplt.show()  # Mostrar el gráfico

from sklearn import linear_model

Regresion = linear_model.LinearRegression()

#Vector por cada valor independiente
Estaturas = data['Estatura (m)'].values.reshape(-1,1)
modelo = Regresion.fit(Estaturas, data['Peso (kg)'])

#saber los valores de formula
print("Intercesion b", modelo.intercept_)
print("Pendiente m", modelo.coef_)

#Encontrar el erro cuadratico
from sklearn.metrics import mean_squared_error

Interseccion = modelo.intercept_
Pendiente = modelo.coef_

y = data['Peso (kg)']
y_pred = Interseccion + (Pendiente * data['Estatura (m)'])
mse = mean_squared_error(y, y_pred)
print(f"Error cuadrático medio (MSE): {mse:.2f}")

# Grafico mas Linea
mplt.xlabel('Estatura (m)')
mplt.ylabel('Peso (kg)')

mplt.scatter(data['Estatura (m)'], data['Peso (kg)'], color='pink')
mplt.title('Comparacion Peso vs Estatura')

#Linea
mplt.plot(Estaturas, modelo.predict(Estaturas), color='black')

mplt.show()

#insertar datos y probar
entrada = [[1.85], [1.45] ,[1.56]]
modelo.predict(entrada)

#Grafica mas datos ingresados
mplt.xlabel('Estatura (m)')
mplt.ylabel('Peso (kg)')

mplt.scatter(data['Estatura (m)'], data['Peso (kg)'], color='pink')
mplt.title('Comparacion Peso vs Estatura')
mplt.plot(Estaturas, modelo.predict(Estaturas), color='black')

#datos ingresados
mplt.scatter(entrada, modelo.predict(entrada), color='red')


mplt.show()